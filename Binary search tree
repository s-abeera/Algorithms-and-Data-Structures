#code is based on pseudocode from Cormen et al and CS110 class work

class Node:
    """ 
    A Node class for the Binary Search Tree class

    Attributes
    ----------
    l_child: Node/ None
        The left child of the node.
        If exists, the left child's data is smaller than the node's.
    r_child: Node/ None
        The right child of the node.
        If exists, the right child's data is larger than or equal to the node's.
    parent: Node/ None
        The parent of the node
    data: int
        The data of the node.
    """  
    def __init__(self, data):
        """
        Parameters
        ----------
        data: int
            The data of the node.
        """ 
        self.l_child = None
        self.r_child = None
        self.parent = None
        self.data = data

    def __repr__(self):
        return f"Node {self.data}"

    def find_min(self):
        """
        Find the minimum node from the node's subtree

        Parameters
        ----------
        None

        Returns
        ----------
        Node
            The minimum node from the node's subtree

        """
        current = self
        while current.l_child is not None:
            current = current.l_child
        return current
    

    def next_largest(self):
        """
        Find the node with the next largest value compared to the current node

        Parameters
        ----------
        None

        Returns
        ----------
        Node
            The node with the next largest value

        """
        if self.r_child is not None:
            return self.r_child.find_min()
        current = self
        while current.parent is not None and current is current.parent.r_child:
            current = current.parent
        return current.parent

class BinarySearchTree:

    def __init__(self):
        self.root = None

    def to_string(self): 
        """
        Print the Binary Search Tree

        Parameters
        ----------
        None

        Returns
        ----------
        None
        """
        if self.root is None: 
            return 'Nil'
        self._print_tree(self.root, 0)

    def _print_tree(self, root, depth):
        """
        Recursively print the tree from the root

        Parameters
        ----------
        root: Node/ None
            the root of the subtree, if it exists
        depth: int
            the depth of the tree

        Returns
        ----------
        None
        """
        if not root: 
            return
        self._print_tree(root.l_child, depth + 1) 
        print('\t'* depth + '➡️ Node'+ str(root.data) +'')
        self._print_tree(root.r_child, depth + 1) 
        
        

    def insert(self, node):
        """
        Insert a node/ value of the node into the tree

        Parameters
        ----------
        node: Node/ int
            the node or the value of the node

        Returns
        ----------
        None
        """

        if type(node) is int: 
            node = Node(node)

        if self.root is None:
            self.root = node
            return
        else:
            self._insert_node(node, self.root)

    def _insert_node(self, node, root):
        """
        Insert a node into an existing subtree

        Parameters
        ----------
        root: Node
            the root of the subtree
        node: Node
            the node to be inserted

        Returns
        ----------
        None
        """
        if root.data > node.data:
            if root.l_child is None:
                root.l_child = node
                node.parent = root
            else:
                self._insert_node(node, root.l_child)
        else:
            if root.r_child is None:
                root.r_child = node
                node.parent = root
            else:
                self._insert_node(node, root.r_child)

    def delete(self, value):
        """
        Delete the first node with the value found from the Binary Search Tree
        if it exists

        Parameters
        ----------
        value: int
            the value of the node to be removed

        Returns
        ----------
        Node/ None
            the node if it is found and deleted, otherwise None
        """
        node = self.search(value)
        if node is None:
            return None
        if node is self.root:
            pseudoroot = Node(None)
            pseudoroot.l_child = self.root
            self.root.parent = pseudoroot
            deleted = self._delete_node(self.root)
            self.root = pseudoroot.l_child
            if self.root is not None:
                self.root.parent = None
                return deleted
        else:
            return self._delete_node(node)

    def _delete_node(self, node):
        """
        Delete a specific node from the Binary Search Tree

        Parameters
        ----------
        node: Node
            the node to be removed

        Returns
        ----------
        Node
            the node that has been removed
        """
        if node.l_child is None or node.r_child is None:
            if node.parent.l_child is node:
                node.parent.l_child = node.l_child or node.r_child
                if node.parent.l_child is not None:
                    node.parent.l_child.parent = node.parent
            else:
                node.parent.r_child = node.r_child or node.l_child
                if node.parent.r_child is not None:
                    node.parent.r_child.parent = node.parent
            return node
        else:
            replacement = node.next_largest()
            replacement.data, node.data = node.data, replacement.data
            return self._delete_node(replacement)

    def search(self, value):
        """
        Search for a value in the Binary Search Tree

        Parameters
        ----------
        value: int
            the value that needs to be searched

        Returns
        ----------
        Node/ None
            the first node found, or None
        """
        if self.root is None:
            return None
        else:
            return self._search_value(value, self.root)

    def _search_value(self, value, root):
        """
        Search for a value from the root of the subtree

        Parameters
        ----------
        value: int
            the value that needs to be searched
        root: Node/ None
            the root of the subtree to search the value

        Returns
        ----------
        Node/ None
            the first node found, or None
        """
        #Your code heresss
        if root is None or value == root.data:
            return root
        if value < root.data:
            return self._search_value(value, root.l_child)
        else:
            return self._search_value(value, root.r_child)
      
        
    
    def inorder(self):
        """
        Return an array of the values in the tree in sorted order

        Parameters
        ----------
        None

        Returns
        ----------
        list
            the array of values in sorted order
        """
        if not self.root: 
            return []
        lst = []
        root = self.root
        def sub_inorder(root):
            if root is not None:
                sub_inorder(root.l_child)
                lst.append(root.data)
                sub_inorder(root.r_child)
                lst.append(root.data)
        # your code here (1 line)
        
        return lst 
