def partition(A,p,r):
    """
    The partition procedure in quicksort, which rearranges the subarray A[p...r] in place.
    Parameters
    ----------
    A : list
    	Length of the input list
    p : int
    	Start point. p>=0
    r: int 
    	End point. r<len(A)
    Returns
    -------
    i+1 : int
    	Index of the pivot
    """
    # your code here
    x = A[r]
    i = p - 1
    for j in range(p, r):
        if A[j] <= x:
            i = i + 1
            A[i], A[j] = A[j], A[i]
    A[i + 1], A[r] = A[r], A[i + 1]
    return i + 1
    
A = [1,5,6,2,3,8,9,4,7]
assert(partition(A, 0, len(A)-1)==6)





def quick_sort(A,p,r):
    """
    Perform quicksort algorithm by dividing array A[p..r] into two (possibly empty) subarrays 
    A[p..q-1] and A[q+1..r].
    
    Parameters
    ----------
    A : list
    	Length of the input list
    p : int
    	Start point. p>=0
    r: int
    	End point. r<len(A)
        
    Returns
    -------
    A : list
    	The sorted list
        """
    # your code here
    if p < r:
        q = partition(A,p,r)
        quick_sort(A, p, q-1)
        quick_sort(A, q+1, r)
    return A

A = [0]
assert(quick_sort(A, 0, 0) == [0])
B = [3,1,2]
assert(quick_sort(B, 0, 2) == [1,2,3])
