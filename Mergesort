def merge(A, p, q, r):
    # your code here
    L = A[p:q+1] #assuming we provide the value of p as 0 instead of 1 as in the pesudocode
    R = A[q+1:r+1]
    L.append(float('inf'))  #append the sentinal at the last index to create a check for when it has to stop
    R.append(float('inf'))
    i = 0
    j = 0
    for k in range(p, r+1): #the range needs to start from 0
        if L[i] <= R[j]:
            A[k] = L[i]
            i += 1
        else:
            A[k] = R[j]
            j += 1
    return A


def merge_sort(A, p, r):
    if p < r:
        # divide the list in the middle by finding its middle value
        q = (p + r) // 2
        # sort left half using merge sort
        merge_sort(A, p, q)
        # sort right half using merge sort
        merge_sort(A, q + 1, r)
        # merge the two half
        merge(A, p, q, r)       
    return A


A = [2, 6, 7, 8, 1, 4]
merge_sort(A, 0, 5)
