def merge_3_sort(array, p, q):
    """
    Sorts array[p] to array[q] in place.
    E.g., to sort an array A, we will run 
    `merge_3_sort(A, 0, len(A)-1)`.


    Parameters
    ----------
    array : Python list or numpy array
    p : int
        index of array element to start sorting from
    q : int
        index of last array element to be sorted

    Returns
    -------
    array: a sorted Python list

    """
    #checks if the list has values. The base case is an empty list which is already sorted.
    if p < q: 
        #finding the split indices. 
        first_split = ((q - p)//3) + p
        second_split = q - ((q - p)//3)
        
        #calls merge sort recursively for each sublist
        merge_3_sort(array, p, first_split)
    
        merge_3_sort(array, first_split + 1, second_split)
    
        merge_3_sort(array, second_split + 1, q)
    
    #sorts the original list by combining all the sublist by comparing each value in the sublists.
        merge_3(array, p, first_split, second_split, q)

    return array    
    
    
    
def merge_3(array, p, q, r, s):
    """
    Merges 3 sorted sublists 
    (array[p] to array[q], array[q+1] to array[r] and array[r+1] to array[s]) 
    in place.
    
    Parameters
    ----------
    array : Python list or numpy array
    p : int
        index of first element of first sublist
    q : int
        index of last element of first sublist
    r : int
        index of last element of second sublist
    s : int
        index of last element of third sublist

    """
    ### YOUR CODE HERE 
    #creating sublists and adding infinity as a sentinal 
    L = array[p : q + 1] + [float('inf')] 
    M = array[q + 1: r + 1] + [float('inf')]
    R = array[r + 1 : s + 1] + [float('inf')]
    
    i = 0
    j = 0
    k = 0
    #compares each value of every sublist with the other two to find the smallest value
    for value in range(p, s+1): 
        if min(L[i], M[j], R[k]) == L[i]:
            array[value] = L[i]
            i += 1
        elif min(L[i], M[j], R[k]) == M[j]:
            array[value] = M[j]
            j += 1
        elif min(L[i], M[j], R[k]) == R[k]: 
            array[value] = R[k]
            k += 1
    return array

A = [4, 6, 7, 2, 7, 9, 3, 2, 9, 6, 1, 8]
merge_3_sort(A, 0, 11)
