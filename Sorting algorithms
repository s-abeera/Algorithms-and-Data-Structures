def insertion_sort(A):
    for j in range(1, len(A)):
        key = A[j]
        i = j-1
        while i >= 0 and A[i] > key:
            A[i+1] = A[i]
            i -= 1
        A[i+1] = key
    return A

assert(insertion_sort([0]) == [0])
assert(insertion_sort([-1,1]) == [-1,1])
assert(insertion_sort([1,-1]) == [-1,1])
assert(insertion_sort([1,6,3,6]) == [1,3,6,6])
assert(insertion_sort([7, 3, 5, 4, 6, 4]) == [3, 4, 4, 5, 6, 7])



def bubble_sort(A):
    # your code here
    #comparison of two consecutive values to see which one of them is smaller. The smaller value is then shifted to the left. 
    for i in range(len(A)):
        for j in range(len(A) - 1):
            if A[j] > A[j+1]:
                A[j+1], A[j] = A[j], A[j+1]
    return A
a = [3, 2, 4, 1, 6, 5]
b = [1, 4, 1, 23]
c = [44, 65, 71, 12, 3, 0]

bubble_sort(a)
bubble_sort(b)
bubble_sort(c)



def selection_sort(A):
    n = len(A)
    for i in range(n-1): #two loops, one for the current minimum, the other for the current item used for comparison. 
        minidx = i
        for j in range(i+1, n):
            if A[j] < A[minidx]: #comparison with each value to find a value that is smaller than the current minimum  
                minidx = j
        A[i], A[minidx] = A[minidx], A[i]
    return A

b = [3, 2, 4, 1, 6, 5]
c = [34, 54, 12, 5, 2, 81]
    
